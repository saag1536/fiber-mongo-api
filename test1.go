package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"strconv"
)

type Json struct {
	Students  []Studentss  `json:"students"`
	Gender    []Genders    `json:"gender"`
	Cars      []Carss      `json:"cars"`
	RgbCode   []RgbCodes   `json:"rgbCode"`
	Countries []Countriess `json:"countries"`
}
type Studentss struct {
	UserID    int      `json:"user_id"`
	FirstName string   `json:"first_name"`
	LastName  string   `json:"last_name"`
	GenderID  string   `json:"gender_id"`
	AdoreCar  string   `json:"adore_car"`
	CarBrand  []string `json:"car_brand"`
	Color     []string `json:"color"`
}
type Genders struct {
	GenderID string `json:"gender_id"`
	Label    string `json:"label"`
}
type Carss struct {
	CarID    string `json:"car_id"`
	CarBrand string `json:"car_brand"`
	CarMake  string `json:"car_make"`
}
type RgbCodes struct {
	Hex   string `json:"hex"`
	Label string `json:"label"`
	Rgb   string `json:"rgb"`
}
type Countriess struct {
	Label   string     `json:"label"`
	UserIds []UserIdss `json:"user_ids"`
}
type UserIdss struct {
	UserID string `json:"userId"`
}

// /////////////////////////////////////////////////////////
type AutoGenerated struct {
	Students []struct {
		UserID    int      `json:"user_id"`
		FirstName string   `json:"first_name"`
		LastName  string   `json:"last_name"`
		GenderID  string   `json:"gender_id"`
		AdoreCar  string   `json:"adore_car"`
		CarBrand  []string `json:"car_brand"`
		Color     []string `json:"color"`
	} `json:"students"`
	Gender []struct {
		GenderID string `json:"gender_id"`
		Label    string `json:"label"`
	} `json:"gender"`
	Cars []struct {
		CarID    string `json:"car_id"`
		CarBrand string `json:"car_brand"`
		CarMake  string `json:"car_make"`
	} `json:"cars"`
	RgbCode []struct {
		Hex   string `json:"hex"`
		Label string `json:"label"`
		Rgb   string `json:"rgb"`
	} `json:"rgbCode"`
	Countries []struct {
		Label   string `json:"label"`
		UserIds []struct {
			UserID string `json:"userId"`
		} `json:"user_ids"`
	} `json:"countries"`
}

type AutoGeneratedd []struct {
	UserID    int    `json:"user_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Gender    string `json:"gender"`
	AdoreCar  struct {
		CarBrand  string `json:"car_brand"`
		BrandFrom string `json:"brand_from"`
	} `json:"adore_car"`
	CarBrand  []string `json:"car_brand"`
	Countries string   `json:"countries"`
	Colors    []struct {
		Hex   string `json:"hex"`
		Label string `json:"label"`
		Rgb   string `json:"rgb"`
	} `json:"colors"`
}

func main() {

	//fmt.Println(Products)
	//fmt.Println(test)
	http.HandleFunc("/", users)
	http.ListenAndServe(":8080", nil)
}
func users(w http.ResponseWriter, r *http.Request) {
	resp, err := http.Get("https://supergourmetth.com/app/test/testing.json")
	if err != nil {
		log.Fatalln(err)
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatalln(err)
	}

	sb := string(body)
	log.Printf(sb)

	var val Json
	if err := json.Unmarshal([]byte(body), &val); err != nil {
		panic(err)
	}

	type Test struct {
		User_id   int    "json:\"user_id\""
		Fisrtname string "json:\"fisrtname\""
		Lastname  string "json:\"lastname\""
		Gender    string "json:\"gender\""
		Adore_car struct {
			CarBrand  string "json:\"car_brand\""
			BrandFrom string "json:\"brand_from\""
		} "json:\"adore_car\""
		Car_brand []string "json:\"car_brand\""
		Countries string   "json:\"countries\""
		Colors    []struct {
			Hex   string "json:\"hex\""
			Label string "json:\"label\""
			Rgb   string "json:\"rgb\""
		} "json:\"colors\""
	}

	test := []Test{}

	for i := range val.Students {
		test = append(test, Test{User_id: val.Students[i].UserID, Fisrtname: val.Students[i].FirstName, Lastname: val.Students[i].LastName})

		//fmt.Printf("%#v\n", val.Students[i])
		for ii := range val.Gender {
			if val.Students[i].GenderID == val.Gender[ii].GenderID {
				//fmt.Println(val.Students[i].GenderID, ": :", val.Gender[ii].Label)
				test[i].Gender = val.Gender[ii].Label
			}

		}
		for iii := range val.Cars {
			if val.Students[i].AdoreCar == val.Cars[iii].CarID {
				//fmt.Println(val.Students[i].AdoreCar, ": :", val.Cars[iii].CarBrand)
				//fmt.Println("   : :", val.Cars[iii].CarMake)
				//test[i].Adore_car = []string{val.Cars[iii].CarBrand, val.Cars[iii].CarMake}
				test[i].Adore_car.BrandFrom = val.Cars[iii].CarMake
				test[i].Adore_car.CarBrand = val.Cars[iii].CarBrand
			}
		}
		for iv := range val.Students[i].CarBrand {
			for v := range val.Cars {
				if val.Students[i].CarBrand[iv] == val.Cars[v].CarID {
					//fmt.Println(val.Students[i].CarBrand[iv], ": :", val.Cars[v].CarBrand)
					//fmt.Println(val.Cars[v].CarBrand)
					test[i].Car_brand = append(test[i].Car_brand, val.Cars[v].CarBrand)
				}

			}
		}
		for vi := range val.Countries {
			for vii := range val.Countries[vi].UserIds {
				ss := val.Countries[vi].UserIds[vii]
				sss, err := strconv.Atoi(ss.UserID)
				if err != nil {
					panic(err)
				}
				if val.Students[i].UserID == sss {
					//fmt.Println(val.Students[i].UserID, ": :", val.Countries[vi].Label)
					test[i].Countries = val.Countries[vi].Label
				}

			}

		}
		for xi := range val.Students[i].Color {
			for x := range val.RgbCode {
				if val.Students[i].Color[xi] == val.RgbCode[x].Label {
					//fmt.Println(val.Students[i].Color[xi], ": :", val.RgbCode[x].Hex, val.RgbCode[x].Rgb)
					//test[i].Colors = append(test[i].Colors, val.RgbCode[x].Hex, val.RgbCode[x].Label, val.RgbCode[x].Rgb)
					test[i].Colors = append(test[i].Colors, struct {
						Hex   string "json:\"hex\""
						Label string "json:\"label\""
						Rgb   string "json:\"rgb\""
					}{Hex: val.RgbCode[x].Hex,
						Label: val.RgbCode[x].Label,
						Rgb:   val.RgbCode[x].Rgb,
					})

				}

			}
		}
	}
	var Products []AutoGeneratedd
	for i := range test {

		Product := AutoGeneratedd{
			struct {
				UserID    int    "json:\"user_id\""
				FirstName string "json:\"first_name\""
				LastName  string "json:\"last_name\""
				Gender    string "json:\"gender\""
				AdoreCar  struct {
					CarBrand  string "json:\"car_brand\""
					BrandFrom string "json:\"brand_from\""
				} "json:\"adore_car\""
				CarBrand  []string "json:\"car_brand\""
				Countries string   "json:\"countries\""
				Colors    []struct {
					Hex   string "json:\"hex\""
					Label string "json:\"label\""
					Rgb   string "json:\"rgb\""
				} "json:\"colors\""
			}{
				UserID:    test[i].User_id,
				FirstName: test[i].Fisrtname,
				LastName:  test[i].Lastname,
				Gender:    test[i].Gender,
				AdoreCar: struct {
					CarBrand  string "json:\"car_brand\""
					BrandFrom string "json:\"brand_from\""
				}{

					CarBrand:  test[i].Adore_car.CarBrand,
					BrandFrom: test[i].Adore_car.BrandFrom,
				},
				CarBrand:  test[i].Car_brand,
				Countries: test[i].Countries,
				Colors: []struct {
					Hex   string "json:\"hex\""
					Label string "json:\"label\""
					Rgb   string "json:\"rgb\""
				}(test[i].Colors),
			},
		}

		Products = append(Products, Product)
	}

	q, err := json.Marshal(test)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Println(err)
		return
	}
	w.WriteHeader(http.StatusOK)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Write(q)
}
